pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata: 
              name: jenkins-agent
            spec:
              containers:
              - name: gradle
                image: gradle:8.10.0-jdk21
                command:
                - cat
                tty: true
              - name: docker
                image: docker:27.2.0-alpine3.20
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: "/var/run/docker.sock"
                  name: docker-socket
              - name: kubectl
                image: gcr.io/cloud-builders/kubectl
                command:
                - cat
                tty: true
              volumes:
              - name: docker-socket
                hostPath:
                  path: "/var/run/docker.sock"
            '''
        }
    }
    stages {
        stage('Checkout') {
            steps{
                git branch: 'main', 
                    credentialsId: 'github_access_ssh_samdasu',
                    url: 'git@github.com:uzz99/Samdasu-Devops.git'
            }
        }

        stage('Build Backend') {
            steps {
                container('gradle'){
                    dir('devopsBackend') {
                        sh 'chmod +x ./gradlew'
                        sh './gradlew clean build -x test'
                    }
                }
            }
        }

        stage('Docker Image Build'){
            steps {
                container('docker'){
                    script {
                        def dockerImageTag = "${env.BUILD_NUMBER}"

                        echo "DockerImageTag : ${dockerImageTag}"

                        sh 'docker logout'
                        withCredentials([usernamePassword(credentialsId: 'samdasu-dockerhub-access', 
                            usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD' )]){
                                sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        }

                        dir('devopsBackend') {
                            withEnv(["DOCKER_IMAGE_TAG=${dockerImageTag}"]){
                                sh 'docker -v'
                                sh 'docker build --no-cache -t uzz99/samdasu_repo:fourstit-back-$DOCKER_IMAGE_TAG ./'
                                sh 'docker image inspect uzz99/samdasu_repo:fourstit-back-$DOCKER_IMAGE_TAG'
                                sh 'docker push uzz99/samdasu_repo:fourstit-back-$DOCKER_IMAGE_TAG'
                            }
                        }
                        sh 'docker logout'
                    }
                }
            }
        }
        stage('Deployment'){
            steps{
                container('kubectl'){
                    script {
                        def dockerImageTag = "${env.BUILD_NUMBER}"

                        echo "DockerImageTag : ${dockerImageTag}"
                        
                        withEnv(["DOCKER_IMAGE_TAG=${dockerImageTag}"]){
                            sh 'kubectl set image deploy fourstit-back-deploy fourstit-back=uzz99/samdasu_repo:fourstit-back-$DOCKER_IMAGE_TAG -n default'
                        }
                    }
                }
            }
        }
    }
    
    post {
        // 성공 시
        // 텍스트 형태의 크레덴셜 가져옴
        // discord-webhook id에 해당하는 시크릿 텍스트 가져와서
        // DISCORD라는 환경변수에 담아줌
        // discordSend => 플러그인
        // webhookURL: "${DISCORD}" <=> variable: 'DISCORD'
        success {
            withCredentials([string(credentialsId: 'samdasu-discord-webhook', variable: 'DISCORD')]) {
                discordSend description: """
                제목 : ${currentBuild.displayName}
                결과 : ${currentBuild.result}
                실행 시간 : ${currentBuild.duration / 1000}s
                """,
                result: currentBuild.currentResult,
                title: "${env.JOB_NAME} : ${currentBuild.displayName} 성공", 
                webhookURL: "${DISCORD}"
            }
        }
        // 빌드 실패 시 실행될 작업
        failure {
            withCredentials([string(credentialsId: 'samdasu-discord-webhook', variable: 'DISCORD')]) {
                discordSend description: """
                제목 : ${currentBuild.displayName}
                결과 : ${currentBuild.result}
                실행 시간 : ${currentBuild.duration / 1000}s
                """,
                result: currentBuild.currentResult,
                title: "${env.JOB_NAME} : ${currentBuild.displayName} 실패", 
                webhookURL: "${DISCORD}"
            }
        }
    }
}