// node:18.20.4 or node:18.20.4-alpine3.20
pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata: 
              name: jenkins-agent
            spec:
              containers:
              - name: node
                image: node:18.20.4-alpine3.20
                command:
                - cat
                tty: true
              - name: docker
                image: docker:27.2.0-alpine3.20
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: "/var/run/docker.sock"
                  name: docker-socket
              - name: kubectl
                image: gcr.io/cloud-builders/kubectl
                command:
                - cat
                tty: true
              volumes:
              - name: docker-socket
                hostPath:
                  path: "/var/run/docker.sock"
            '''
        }
    }

    environment {
        GIT_BRANCH = 'front'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
        DISCORD_WEBHOOK = credentials('discord-webhook')
    }

    stages {
        stage('Checkout') {
            steps{
                git branch: "${GIT_BRANCH}", 
                    credentialsId: 'github_access_ssh_samdasu',
                    url: 'git@github.com:uzz99/Samdasu-Devops.git'
            }
        }

        stage('Npm install & Build Frontend') {
            when {
                changeset "devopsFront/**"
            }
            steps {
                container('node') {
                    dir('devopsFront') {
                        echo "Build devopsFront Test"
                        sh 'npm install'
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Docker Image Build') {
            when {
                changeset "devopsFront/**"
            }
            steps {
                container('docker') {
                    script {
                        echo "DockerImageTag : ${DOCKER_IMAGE_TAG}"
                        echo "Docker Build Test"

                        sh 'docker logout'
                        withCredentials([usernamePassword(credentialsId: 'samdasu-dockerhub-access', 
                            usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD' )]){
                                sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        }

                        dir('devopsFront') {
                            withEnv(["DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}"]){
                                sh 'docker build --no-cache -t uzz99/samdasu_repo:fourstit-front-$DOCKER_IMAGE_TAG ./'
                                sh 'docker image inspect uzz99/samdasu_repo:fourstit-front-$DOCKER_IMAGE_TAG'
                                sh 'docker push uzz99/samdasu_repo:fourstit-front-$DOCKER_IMAGE_TAG'
                            }
                        }
                        sh 'docker logout'
                    }
                }
            }
        }
        stage('Deployment'){
            when {
                changeset "devopsFront/**"
            }
            steps{
                container('kubectl'){
                    script {
                        echo "DockerImageTag : ${DOCKER_IMAGE_TAG}"
                        
                        withEnv(["DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}"]){
                            sh 'kubectl set image deploy fourstit-front-deploy nginx=uzz99/samdasu_repo:fourstit-front-$DOCKER_IMAGE_TAG -n default'
                        }
                    }
                }
            }
        }
        
        stage('Create Auto PR') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github_personal_access_token',
                    usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                            sh """
                            git config user.name "$GITHUB_USER"
                            git config user.email "yj.lee991228@gmail.com"
                            git checkout front
                            git remote set-url origin https://$GITHUB_USER:$GITHUB_TOKEN@github.com/beyond-sw-camp/be08-4th-3Dasoo.git
                            git pull origin front --rebase
                            git push origin front
                            curl -u $GITHUB_USER:$GITHUB_TOKEN -X POST -d '{"title":"[Frontend] Auto PR: Updated Docker Tag to \\"fourstit-front-${DOCKER_IMAGE_TAG}\\"", "head":"${GIT_BRANCH}", "base":"main"}' https://api.github.com/beyond-sw-camp/be08-4th-3Dasoo/pulls
                            """
                    }
                    echo "[Samdasu-Front] PR 생성 완료"
                }
            }
        }
    }
    
    post {
        success {
            withCredentials([string(credentialsId: 'discord-webhook', variable: 'DISCORD')]) {
                discordSend description: """
                제목 : ${currentBuild.displayName}
                결과 : ${currentBuild.result}
                실행 시간 : ${currentBuild.duration / 1000}s
                Docker 이미지 태그 생성: fourstit-front-${DOCKER_IMAGE_TAG}
                """,
                result: currentBuild.currentResult,
                title: "${env.JOB_NAME} : ${currentBuild.displayName} 성공", 
                webhookURL: "${DISCORD}"
            }
        }

        failure {
            withCredentials([string(credentialsId: 'discord-webhook', variable: 'DISCORD')]) {
                discordSend description: """
                제목 : ${currentBuild.displayName}
                결과 : ${currentBuild.result}
                실행 시간 : ${currentBuild.duration / 1000}s
                """,
                result: currentBuild.currentResult,
                title: "${env.JOB_NAME} : ${currentBuild.displayName} 실패", 
                webhookURL: "${DISCORD}"
            }
        }
    }
}